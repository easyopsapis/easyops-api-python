# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from model.topology.cmdb_instance_pb2 import (
    CmdbInstance as model___topology___cmdb_instance_pb2___CmdbInstance,
)

from model.topology.strategy_pb2 import (
    Strategy as model___topology___strategy_pb2___Strategy,
)

from typing import (
    Iterable as typing___Iterable,
    Optional as typing___Optional,
    Text as typing___Text,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class Property(google___protobuf___message___Message):
    objectId = ... # type: typing___Text
    instanceId = ... # type: typing___Text

    @property
    def strategy(self) -> model___topology___strategy_pb2___Strategy: ...

    @property
    def relateInstances(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[model___topology___cmdb_instance_pb2___CmdbInstance]: ...

    def __init__(self,
        objectId : typing___Optional[typing___Text] = None,
        instanceId : typing___Optional[typing___Text] = None,
        strategy : typing___Optional[model___topology___strategy_pb2___Strategy] = None,
        relateInstances : typing___Optional[typing___Iterable[model___topology___cmdb_instance_pb2___CmdbInstance]] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> Property: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"strategy"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"instanceId",u"objectId",u"relateInstances",u"strategy"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"strategy",b"strategy"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[b"instanceId",b"objectId",b"relateInstances",b"strategy"]) -> None: ...
