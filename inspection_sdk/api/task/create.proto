syntax = "proto3";
package task;




import "inspection_sdk/model/inspection/val.proto";
import "inspection_sdk/model/inspection/user_or_user_group.proto";

/*
CreateTask请求
*/
message CreateTaskRequest {
message Args {
    /*
    参数ID
    */
    string key = 1 ;
    /*
    参数的值
    */
    string value = 2 ;
    /*
    参数的来源
attr_id: CMDB模型的属性
custom: 自定义

    */
    string source = 3 ;
}
        
message Targets {
    /*
    巡检对象实例ID
    */
    string instanceId = 1 ;
}
        
    
    /*
    套件id
    */
    string pluginId = 1 ;
    /*
    自定义阈值
    */
    repeated inspection.InspectionVal vals = 2 ;
    /*
    巡检任务名称
    */
    string name = 3 ;
    /*
    是否全部通知
    */
    bool isAllNotify = 4 ;
    /*
    邮件通知限制
    */
    string notifyPassComparator = 5 ;
    /*
    邮件通知评分限制
    */
    float notifyScore = 6 ;
    /*
    采集时需要的参数
    */
    repeated Args args = 7 ;
    /*
    通知的用户
    */
    inspection.InspectionUserOrUserGroup notifyUser = 8 ;
    /*
    通知的用户组
    */
    inspection.InspectionUserOrUserGroup notifyUserGroup = 9 ;
    /*
    巡检策略(once单次,crontab周期)
    */
    string taskType = 10 ;
    /*
    执行目标(指定实例,指定查询策略)
    */
    string performanceTargets = 11 ;
    /*
    仅当执行目标为指定查询策略时该参数有效
    */
    string queryStrategyId = 12 ;
    /*
    任务调度时间
    */
    string taskScheduler = 13 ;
    /*
    仅当执行目标为指定实例时该参数有效
    */
    repeated Targets targets = 14 ;
    /*
    备注
    */
    string memo = 15 ;
    /*
    报告模板ID
    */
    string templateId = 16 ;
    /*
    报告模板名
    */
    string templateName = 17 ;
}

/*
CreateTask返回
*/
message CreateTaskResponse {
message Targets {
    /*
    巡检对象实例ID
    */
    string instanceId = 1 ;
}
        
    
    /*
    巡检任务名称
    */
    string name = 1 ;
    /*
    任务调度时间
    */
    string taskScheduler = 2 ;
    /*
    报告模板名
    */
    string templateName = 3 ;
    /*
    备注
    */
    string memo = 4 ;
    /*
    巡检策略(once单次,crontab周期)
    */
    string taskType = 5 ;
    /*
    仅当执行目标为指定实例时该参数有效
    */
    repeated Targets targets = 6 ;
}

/*
CreateTaskApi返回
*/
message CreateTaskResponseWrapper {
    /*
    返回码
    */
    int32 code = 1 ;
    /*
    返回码解释
    */
    string codeExplain = 2 ;
    /*
    错误详情
    */
    string error = 3 ;
    /*
    返回数据
    */
    task.CreateTaskResponse data = 4 ;
}

