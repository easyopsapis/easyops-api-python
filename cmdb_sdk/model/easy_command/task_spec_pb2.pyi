# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from model.easy_command.action_pb2 import (
    Action as model___easy_command___action_pb2___Action,
)

from model.easy_command.target_pb2 import (
    Target as model___easy_command___target_pb2___Target,
)

from model.easy_command.task_callback_pb2 import (
    TaskCallback as model___easy_command___task_callback_pb2___TaskCallback,
)

from typing import (
    Iterable as typing___Iterable,
    Optional as typing___Optional,
    Text as typing___Text,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class TaskSpec(google___protobuf___message___Message):
    taskId = ... # type: typing___Text
    name = ... # type: typing___Text
    type = ... # type: typing___Text
    operation = ... # type: typing___Text
    groupId = ... # type: typing___Text
    appId = ... # type: typing___Text
    clusterId = ... # type: typing___Text
    packageId = ... # type: typing___Text
    versionId = ... # type: typing___Text
    needNotify = ... # type: bool
    batchNum = ... # type: int
    batchInterval = ... # type: int
    failedStop = ... # type: bool

    @property
    def actions(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[model___easy_command___action_pb2___Action]: ...

    @property
    def targets(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[model___easy_command___target_pb2___Target]: ...

    @property
    def callback(self) -> model___easy_command___task_callback_pb2___TaskCallback: ...

    def __init__(self,
        taskId : typing___Optional[typing___Text] = None,
        name : typing___Optional[typing___Text] = None,
        type : typing___Optional[typing___Text] = None,
        operation : typing___Optional[typing___Text] = None,
        groupId : typing___Optional[typing___Text] = None,
        actions : typing___Optional[typing___Iterable[model___easy_command___action_pb2___Action]] = None,
        targets : typing___Optional[typing___Iterable[model___easy_command___target_pb2___Target]] = None,
        appId : typing___Optional[typing___Text] = None,
        clusterId : typing___Optional[typing___Text] = None,
        packageId : typing___Optional[typing___Text] = None,
        versionId : typing___Optional[typing___Text] = None,
        needNotify : typing___Optional[bool] = None,
        callback : typing___Optional[model___easy_command___task_callback_pb2___TaskCallback] = None,
        batchNum : typing___Optional[int] = None,
        batchInterval : typing___Optional[int] = None,
        failedStop : typing___Optional[bool] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> TaskSpec: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"callback"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"actions",u"appId",u"batchInterval",u"batchNum",u"callback",u"clusterId",u"failedStop",u"groupId",u"name",u"needNotify",u"operation",u"packageId",u"targets",u"taskId",u"type",u"versionId"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"callback",b"callback"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[b"actions",b"appId",b"batchInterval",b"batchNum",b"callback",b"clusterId",b"failedStop",b"groupId",b"name",b"needNotify",b"operation",b"packageId",b"targets",b"taskId",b"type",b"versionId"]) -> None: ...
