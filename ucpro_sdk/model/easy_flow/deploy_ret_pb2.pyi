# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from model.easy_flow.deploy_label_pb2 import (
    DeployLabel as model___easy_flow___deploy_label_pb2___DeployLabel,
)

from model.easy_flow.target_result_pb2 import (
    TargetResult as model___easy_flow___target_result_pb2___TargetResult,
)

from typing import (
    Iterable as typing___Iterable,
    Optional as typing___Optional,
    Text as typing___Text,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class DeployRet(google___protobuf___message___Message):
    taskId = ... # type: typing___Text
    appId = ... # type: typing___Text
    appName = ... # type: typing___Text
    operator = ... # type: typing___Text
    org = ... # type: int
    batchNum = ... # type: int
    batchInterval = ... # type: int
    failedStop = ... # type: typing___Text
    status = ... # type: typing___Text
    code = ... # type: int
    usedTime = ... # type: int
    startTime = ... # type: typing___Text
    endTime = ... # type: typing___Text
    clusterId = ... # type: typing___Text
    configPackageId = ... # type: typing___Text

    @property
    def targetList(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[model___easy_flow___target_result_pb2___TargetResult]: ...

    @property
    def labels(self) -> model___easy_flow___deploy_label_pb2___DeployLabel: ...

    def __init__(self,
        taskId : typing___Optional[typing___Text] = None,
        appId : typing___Optional[typing___Text] = None,
        appName : typing___Optional[typing___Text] = None,
        operator : typing___Optional[typing___Text] = None,
        org : typing___Optional[int] = None,
        targetList : typing___Optional[typing___Iterable[model___easy_flow___target_result_pb2___TargetResult]] = None,
        batchNum : typing___Optional[int] = None,
        batchInterval : typing___Optional[int] = None,
        failedStop : typing___Optional[typing___Text] = None,
        status : typing___Optional[typing___Text] = None,
        code : typing___Optional[int] = None,
        usedTime : typing___Optional[int] = None,
        startTime : typing___Optional[typing___Text] = None,
        endTime : typing___Optional[typing___Text] = None,
        clusterId : typing___Optional[typing___Text] = None,
        configPackageId : typing___Optional[typing___Text] = None,
        labels : typing___Optional[model___easy_flow___deploy_label_pb2___DeployLabel] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> DeployRet: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"labels"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"appId",u"appName",u"batchInterval",u"batchNum",u"clusterId",u"code",u"configPackageId",u"endTime",u"failedStop",u"labels",u"operator",u"org",u"startTime",u"status",u"targetList",u"taskId",u"usedTime"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"labels",b"labels"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[b"appId",b"appName",b"batchInterval",b"batchNum",b"clusterId",b"code",b"configPackageId",b"endTime",b"failedStop",b"labels",b"operator",b"org",b"startTime",b"status",b"targetList",b"taskId",b"usedTime"]) -> None: ...
