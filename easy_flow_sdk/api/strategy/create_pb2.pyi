# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from model.cmdb.cluster_info_pb2 import (
    ClusterInfo as model___cmdb___cluster_info_pb2___ClusterInfo,
)

from model.easy_flow.deploy_batch_target_pb2 import (
    DeployBatchTarget as model___easy_flow___deploy_batch_target_pb2___DeployBatchTarget,
)

from model.easy_flow.deploy_strategy_pb2 import (
    DeployStrategy as model___easy_flow___deploy_strategy_pb2___DeployStrategy,
)

from model.easy_flow.target_info_pb2 import (
    TargetInfo as model___easy_flow___target_info_pb2___TargetInfo,
)

from typing import (
    Iterable as typing___Iterable,
    Optional as typing___Optional,
    Text as typing___Text,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class CreateRequest(google___protobuf___message___Message):
    class App(google___protobuf___message___Message):
        name = ... # type: typing___Text
        appId = ... # type: typing___Text

        def __init__(self,
            name : typing___Optional[typing___Text] = None,
            appId : typing___Optional[typing___Text] = None,
            ) -> None: ...
        @classmethod
        def FromString(cls, s: bytes) -> CreateRequest.App: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"appId",u"name"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[b"appId",b"name"]) -> None: ...

    class BatchStrategy(google___protobuf___message___Message):
        class AutoBatch(google___protobuf___message___Message):
            batchNum = ... # type: int
            batchInterval = ... # type: int
            failedStop = ... # type: typing___Text

            def __init__(self,
                batchNum : typing___Optional[int] = None,
                batchInterval : typing___Optional[int] = None,
                failedStop : typing___Optional[typing___Text] = None,
                ) -> None: ...
            @classmethod
            def FromString(cls, s: bytes) -> CreateRequest.BatchStrategy.AutoBatch: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"batchInterval",u"batchNum",u"failedStop"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[b"batchInterval",b"batchNum",b"failedStop"]) -> None: ...

        class ManualBatch(google___protobuf___message___Message):
            class Batches(google___protobuf___message___Message):

                @property
                def targets(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[model___easy_flow___deploy_batch_target_pb2___DeployBatchTarget]: ...

                def __init__(self,
                    targets : typing___Optional[typing___Iterable[model___easy_flow___deploy_batch_target_pb2___DeployBatchTarget]] = None,
                    ) -> None: ...
                @classmethod
                def FromString(cls, s: bytes) -> CreateRequest.BatchStrategy.ManualBatch.Batches: ...
                def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
                if sys.version_info >= (3,):
                    def ClearField(self, field_name: typing_extensions___Literal[u"targets"]) -> None: ...
                else:
                    def ClearField(self, field_name: typing_extensions___Literal[b"targets"]) -> None: ...

            batchNum = ... # type: int
            batchInterval = ... # type: int
            failedStop = ... # type: typing___Text

            @property
            def batches(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[CreateRequest.BatchStrategy.ManualBatch.Batches]: ...

            def __init__(self,
                batches : typing___Optional[typing___Iterable[CreateRequest.BatchStrategy.ManualBatch.Batches]] = None,
                batchNum : typing___Optional[int] = None,
                batchInterval : typing___Optional[int] = None,
                failedStop : typing___Optional[typing___Text] = None,
                ) -> None: ...
            @classmethod
            def FromString(cls, s: bytes) -> CreateRequest.BatchStrategy.ManualBatch: ...
            def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
            if sys.version_info >= (3,):
                def ClearField(self, field_name: typing_extensions___Literal[u"batchInterval",u"batchNum",u"batches",u"failedStop"]) -> None: ...
            else:
                def ClearField(self, field_name: typing_extensions___Literal[b"batchInterval",b"batchNum",b"batches",b"failedStop"]) -> None: ...

        type = ... # type: typing___Text

        @property
        def autoBatch(self) -> CreateRequest.BatchStrategy.AutoBatch: ...

        @property
        def manualBatch(self) -> CreateRequest.BatchStrategy.ManualBatch: ...

        def __init__(self,
            autoBatch : typing___Optional[CreateRequest.BatchStrategy.AutoBatch] = None,
            manualBatch : typing___Optional[CreateRequest.BatchStrategy.ManualBatch] = None,
            type : typing___Optional[typing___Text] = None,
            ) -> None: ...
        @classmethod
        def FromString(cls, s: bytes) -> CreateRequest.BatchStrategy: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def HasField(self, field_name: typing_extensions___Literal[u"autoBatch",u"manualBatch"]) -> bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"autoBatch",u"manualBatch",u"type"]) -> None: ...
        else:
            def HasField(self, field_name: typing_extensions___Literal[u"autoBatch",b"autoBatch",u"manualBatch",b"manualBatch"]) -> bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[b"autoBatch",b"manualBatch",b"type"]) -> None: ...

    class PackageList(google___protobuf___message___Message):
        targetVersion = ... # type: typing___Text
        preStop = ... # type: typing___Text
        postRestart = ... # type: typing___Text
        autoStart = ... # type: typing___Text
        userCheck = ... # type: typing___Text
        fullUpdate = ... # type: typing___Text
        force = ... # type: typing___Text
        forceInstall = ... # type: typing___Text
        packageId = ... # type: typing___Text
        name = ... # type: typing___Text
        installPath = ... # type: typing___Text
        type = ... # type: int
        platform = ... # type: typing___Text

        @property
        def cluster(self) -> model___cmdb___cluster_info_pb2___ClusterInfo: ...

        def __init__(self,
            cluster : typing___Optional[model___cmdb___cluster_info_pb2___ClusterInfo] = None,
            targetVersion : typing___Optional[typing___Text] = None,
            preStop : typing___Optional[typing___Text] = None,
            postRestart : typing___Optional[typing___Text] = None,
            autoStart : typing___Optional[typing___Text] = None,
            userCheck : typing___Optional[typing___Text] = None,
            fullUpdate : typing___Optional[typing___Text] = None,
            force : typing___Optional[typing___Text] = None,
            forceInstall : typing___Optional[typing___Text] = None,
            packageId : typing___Optional[typing___Text] = None,
            name : typing___Optional[typing___Text] = None,
            installPath : typing___Optional[typing___Text] = None,
            type : typing___Optional[int] = None,
            platform : typing___Optional[typing___Text] = None,
            ) -> None: ...
        @classmethod
        def FromString(cls, s: bytes) -> CreateRequest.PackageList: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def HasField(self, field_name: typing_extensions___Literal[u"cluster"]) -> bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[u"autoStart",u"cluster",u"force",u"forceInstall",u"fullUpdate",u"installPath",u"name",u"packageId",u"platform",u"postRestart",u"preStop",u"targetVersion",u"type",u"userCheck"]) -> None: ...
        else:
            def HasField(self, field_name: typing_extensions___Literal[u"cluster",b"cluster"]) -> bool: ...
            def ClearField(self, field_name: typing_extensions___Literal[b"autoStart",b"cluster",b"force",b"forceInstall",b"fullUpdate",b"installPath",b"name",b"packageId",b"platform",b"postRestart",b"preStop",b"targetVersion",b"type",b"userCheck"]) -> None: ...

    class Status(google___protobuf___message___Message):
        outOfDate = ... # type: typing___Text

        def __init__(self,
            outOfDate : typing___Optional[typing___Text] = None,
            ) -> None: ...
        @classmethod
        def FromString(cls, s: bytes) -> CreateRequest.Status: ...
        def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
        if sys.version_info >= (3,):
            def ClearField(self, field_name: typing_extensions___Literal[u"outOfDate"]) -> None: ...
        else:
            def ClearField(self, field_name: typing_extensions___Literal[b"outOfDate"]) -> None: ...

    id = ... # type: typing___Text
    name = ... # type: typing___Text
    apiVersion = ... # type: typing___Text
    org = ... # type: int
    type = ... # type: typing___Text
    scope = ... # type: typing___Text
    clusterEnvironment = ... # type: typing___Text
    clusterType = ... # type: typing___Text

    @property
    def app(self) -> CreateRequest.App: ...

    @property
    def batchStrategy(self) -> CreateRequest.BatchStrategy: ...

    @property
    def clusters(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[model___cmdb___cluster_info_pb2___ClusterInfo]: ...

    @property
    def targetList(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[model___easy_flow___target_info_pb2___TargetInfo]: ...

    @property
    def packageList(self) -> CreateRequest.PackageList: ...

    @property
    def status(self) -> CreateRequest.Status: ...

    def __init__(self,
        id : typing___Optional[typing___Text] = None,
        name : typing___Optional[typing___Text] = None,
        apiVersion : typing___Optional[typing___Text] = None,
        org : typing___Optional[int] = None,
        app : typing___Optional[CreateRequest.App] = None,
        type : typing___Optional[typing___Text] = None,
        batchStrategy : typing___Optional[CreateRequest.BatchStrategy] = None,
        scope : typing___Optional[typing___Text] = None,
        clusters : typing___Optional[typing___Iterable[model___cmdb___cluster_info_pb2___ClusterInfo]] = None,
        targetList : typing___Optional[typing___Iterable[model___easy_flow___target_info_pb2___TargetInfo]] = None,
        clusterEnvironment : typing___Optional[typing___Text] = None,
        clusterType : typing___Optional[typing___Text] = None,
        packageList : typing___Optional[CreateRequest.PackageList] = None,
        status : typing___Optional[CreateRequest.Status] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> CreateRequest: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"app",u"batchStrategy",u"packageList",u"status"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"apiVersion",u"app",u"batchStrategy",u"clusterEnvironment",u"clusterType",u"clusters",u"id",u"name",u"org",u"packageList",u"scope",u"status",u"targetList",u"type"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"app",b"app",u"batchStrategy",b"batchStrategy",u"packageList",b"packageList",u"status",b"status"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[b"apiVersion",b"app",b"batchStrategy",b"clusterEnvironment",b"clusterType",b"clusters",b"id",b"name",b"org",b"packageList",b"scope",b"status",b"targetList",b"type"]) -> None: ...

class CreateResponseWrapper(google___protobuf___message___Message):
    code = ... # type: int
    codeExplain = ... # type: typing___Text
    error = ... # type: typing___Text

    @property
    def data(self) -> model___easy_flow___deploy_strategy_pb2___DeployStrategy: ...

    def __init__(self,
        code : typing___Optional[int] = None,
        codeExplain : typing___Optional[typing___Text] = None,
        error : typing___Optional[typing___Text] = None,
        data : typing___Optional[model___easy_flow___deploy_strategy_pb2___DeployStrategy] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> CreateResponseWrapper: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"data"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"code",u"codeExplain",u"data",u"error"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"data",b"data"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[b"code",b"codeExplain",b"data",b"error"]) -> None: ...
