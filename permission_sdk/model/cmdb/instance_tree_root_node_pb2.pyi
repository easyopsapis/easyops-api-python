# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from google.protobuf.struct_pb2 import (
    Struct as google___protobuf___struct_pb2___Struct,
)

from model.cmdb.instance_tree_child_node_pb2 import (
    InstanceTreeChildNode as model___cmdb___instance_tree_child_node_pb2___InstanceTreeChildNode,
)

from typing import (
    Iterable as typing___Iterable,
    Optional as typing___Optional,
    Text as typing___Text,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class InstanceTreeRootNode(google___protobuf___message___Message):
    object_id = ... # type: typing___Text

    @property
    def query(self) -> google___protobuf___struct_pb2___Struct: ...

    @property
    def fields(self) -> google___protobuf___struct_pb2___Struct: ...

    @property
    def child(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[model___cmdb___instance_tree_child_node_pb2___InstanceTreeChildNode]: ...

    def __init__(self,
        object_id : typing___Optional[typing___Text] = None,
        query : typing___Optional[google___protobuf___struct_pb2___Struct] = None,
        fields : typing___Optional[google___protobuf___struct_pb2___Struct] = None,
        child : typing___Optional[typing___Iterable[model___cmdb___instance_tree_child_node_pb2___InstanceTreeChildNode]] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> InstanceTreeRootNode: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"fields",u"query"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"child",u"fields",u"object_id",u"query"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"fields",b"fields",u"query",b"query"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[b"child",b"fields",b"object_id",b"query"]) -> None: ...
