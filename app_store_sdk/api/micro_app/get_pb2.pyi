# @generated by generate_proto_mypy_stubs.py.  Do not edit!
import sys
from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer as google___protobuf___internal___containers___RepeatedCompositeFieldContainer,
)

from google.protobuf.message import (
    Message as google___protobuf___message___Message,
)

from model.app_store.app_version_pb2 import (
    AppVersion as model___app_store___app_version_pb2___AppVersion,
)

from model.app_store.micro_app_pb2 import (
    AppStoreMicroApp as model___app_store___micro_app_pb2___AppStoreMicroApp,
)

from model.app_store.release_package_pb2 import (
    ReleasePackage as model___app_store___release_package_pb2___ReleasePackage,
)

from typing import (
    Iterable as typing___Iterable,
    Optional as typing___Optional,
    Text as typing___Text,
)

from typing_extensions import (
    Literal as typing_extensions___Literal,
)


class GetAppStoreMicroAppRequest(google___protobuf___message___Message):
    app_id = ... # type: typing___Text

    def __init__(self,
        app_id : typing___Optional[typing___Text] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> GetAppStoreMicroAppRequest: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def ClearField(self, field_name: typing_extensions___Literal[u"app_id"]) -> None: ...
    else:
        def ClearField(self, field_name: typing_extensions___Literal[b"app_id"]) -> None: ...

class GetAppStoreMicroAppResponse(google___protobuf___message___Message):

    @property
    def microApp(self) -> model___app_store___micro_app_pb2___AppStoreMicroApp: ...

    @property
    def curVersion(self) -> model___app_store___app_version_pb2___AppVersion: ...

    @property
    def packageList(self) -> google___protobuf___internal___containers___RepeatedCompositeFieldContainer[model___app_store___release_package_pb2___ReleasePackage]: ...

    def __init__(self,
        microApp : typing___Optional[model___app_store___micro_app_pb2___AppStoreMicroApp] = None,
        curVersion : typing___Optional[model___app_store___app_version_pb2___AppVersion] = None,
        packageList : typing___Optional[typing___Iterable[model___app_store___release_package_pb2___ReleasePackage]] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> GetAppStoreMicroAppResponse: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"curVersion",u"microApp"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"curVersion",u"microApp",u"packageList"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"curVersion",b"curVersion",u"microApp",b"microApp"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[b"curVersion",b"microApp",b"packageList"]) -> None: ...

class GetAppStoreMicroAppResponseWrapper(google___protobuf___message___Message):
    code = ... # type: int
    codeExplain = ... # type: typing___Text
    error = ... # type: typing___Text

    @property
    def data(self) -> GetAppStoreMicroAppResponse: ...

    def __init__(self,
        code : typing___Optional[int] = None,
        codeExplain : typing___Optional[typing___Text] = None,
        error : typing___Optional[typing___Text] = None,
        data : typing___Optional[GetAppStoreMicroAppResponse] = None,
        ) -> None: ...
    @classmethod
    def FromString(cls, s: bytes) -> GetAppStoreMicroAppResponseWrapper: ...
    def MergeFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    def CopyFrom(self, other_msg: google___protobuf___message___Message) -> None: ...
    if sys.version_info >= (3,):
        def HasField(self, field_name: typing_extensions___Literal[u"data"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[u"code",u"codeExplain",u"data",u"error"]) -> None: ...
    else:
        def HasField(self, field_name: typing_extensions___Literal[u"data",b"data"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions___Literal[b"code",b"codeExplain",b"data",b"error"]) -> None: ...
